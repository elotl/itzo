/*
Copyright 2020 Elotl Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package conmap

import (
	"os"
	"sync"

	"github.com/elotl/itzo/pkg/logbuf"
)

// Mostly taken from
// https://github.com/cheekybits/gennylib/blob/master/maps/concurrentmap.go
// We've added an Items() function

type StringString struct {
	sync.RWMutex
	data map[string]string
}

type NodeStringString struct {
	Key   string
	Value string
}

func NewStringString() *StringString {
	return &StringString{
		data: make(map[string]string),
	}
}

func (m *StringString) Set(key string, value string) {
	m.Lock()
	m.data[key] = value
	m.Unlock()
}

func (m *StringString) Delete(key string) {
	m.Lock()
	delete(m.data, key)
	m.Unlock()
}

func (m *StringString) Get(key string) string {
	m.RLock()
	value := m.data[key]
	m.RUnlock()
	return value
}

func (m *StringString) GetOK(key string) (string, bool) {
	m.RLock()
	value, exists := m.data[key]
	m.RUnlock()
	return value, exists
}

func (m *StringString) Len() int {
	m.RLock()
	len := len(m.data)
	m.RUnlock()
	return len
}

func (m *StringString) Items() []NodeStringString {
	m.RLock()
	items := make([]NodeStringString, 0, len(m.data))
	for k, v := range m.data {
		items = append(items, NodeStringString{Key: k, Value: v})
	}
	m.RUnlock()
	return items
}

// Mostly taken from
// https://github.com/cheekybits/gennylib/blob/master/maps/concurrentmap.go
// We've added an Items() function

type StringOsProcess struct {
	sync.RWMutex
	data map[string]*os.Process
}

type NodeStringOsProcess struct {
	Key   string
	Value *os.Process
}

func NewStringOsProcess() *StringOsProcess {
	return &StringOsProcess{
		data: make(map[string]*os.Process),
	}
}

func (m *StringOsProcess) Set(key string, value *os.Process) {
	m.Lock()
	m.data[key] = value
	m.Unlock()
}

func (m *StringOsProcess) Delete(key string) {
	m.Lock()
	delete(m.data, key)
	m.Unlock()
}

func (m *StringOsProcess) Get(key string) *os.Process {
	m.RLock()
	value := m.data[key]
	m.RUnlock()
	return value
}

func (m *StringOsProcess) GetOK(key string) (*os.Process, bool) {
	m.RLock()
	value, exists := m.data[key]
	m.RUnlock()
	return value, exists
}

func (m *StringOsProcess) Len() int {
	m.RLock()
	len := len(m.data)
	m.RUnlock()
	return len
}

func (m *StringOsProcess) Items() []NodeStringOsProcess {
	m.RLock()
	items := make([]NodeStringOsProcess, 0, len(m.data))
	for k, v := range m.data {
		items = append(items, NodeStringOsProcess{Key: k, Value: v})
	}
	m.RUnlock()
	return items
}

// Mostly taken from
// https://github.com/cheekybits/gennylib/blob/master/maps/concurrentmap.go
// We've added an Items() function

type StringLogbufLogBuffer struct {
	sync.RWMutex
	data map[string]*logbuf.LogBuffer
}

type NodeStringLogbufLogBuffer struct {
	Key   string
	Value *logbuf.LogBuffer
}

func NewStringLogbufLogBuffer() *StringLogbufLogBuffer {
	return &StringLogbufLogBuffer{
		data: make(map[string]*logbuf.LogBuffer),
	}
}

func (m *StringLogbufLogBuffer) Set(key string, value *logbuf.LogBuffer) {
	m.Lock()
	m.data[key] = value
	m.Unlock()
}

func (m *StringLogbufLogBuffer) Delete(key string) {
	m.Lock()
	delete(m.data, key)
	m.Unlock()
}

func (m *StringLogbufLogBuffer) Get(key string) *logbuf.LogBuffer {
	m.RLock()
	value := m.data[key]
	m.RUnlock()
	return value
}

func (m *StringLogbufLogBuffer) GetOK(key string) (*logbuf.LogBuffer, bool) {
	m.RLock()
	value, exists := m.data[key]
	m.RUnlock()
	return value, exists
}

func (m *StringLogbufLogBuffer) Len() int {
	m.RLock()
	len := len(m.data)
	m.RUnlock()
	return len
}

func (m *StringLogbufLogBuffer) Items() []NodeStringLogbufLogBuffer {
	m.RLock()
	items := make([]NodeStringLogbufLogBuffer, 0, len(m.data))
	for k, v := range m.data {
		items = append(items, NodeStringLogbufLogBuffer{Key: k, Value: v})
	}
	m.RUnlock()
	return items
}
